#include <functional>
#include <algorithm>
#include <set>
using namespace std;
 
using line_t = double;
const line_t is_query = -1e18;
struct Line {
	line_t m, b;
	mutable function<const Line*()> succ;
	bool operator<(const Line& rhs) const {
		if (rhs.b != is_query) return m < rhs.m;
		const Line* s = succ();
		if (!s) return 0;
		line_t x = rhs.m;
		return b - s->b < (s->m - m) * x;
	}
};
struct HullDynamic : public multiset<Line> { // will maintain upper hull for maximum
	bool bad(iterator y) {
		auto z = next(y);
		if (y == begin()) {
			if (z == end()) return 0;
			return y->m == z->m && y->b <= z->b;
		}
		auto x = prev(y);
		if (z == end()) return y->m == x->m && y->b <= x->b;
		return (x->b - y->b)*(z->m - y->m) >= (y->b - z->b)*(y->m - x->m);
	}
	void insert_line(line_t m, line_t b) {
		auto y = insert({ m, b });
		y->succ = [=] { return next(y) == end() ? 0 : &*next(y); };
		if (bad(y)) { erase(y); return; }
		while (next(y) != end() && bad(next(y))) erase(next(y));
		while (y != begin() && bad(prev(y))) erase(prev(y));
	}
	line_t query(line_t x) {
		Line tptp = { x, is_query };
		auto l = *lower_bound(tptp);
		return l.m * x + l.b;
	}
}H;
 
int n, w[201000];
long long K, D[201000];
 
int main() {
	int i;
	scanf("%d%lld", &n,&K);
	for (i = 1; i <= n; i++) {
		scanf("%d", &w[i]);
		if(i!=1)D[i] = -H.query(w[i]) + 1ll*w[i]*w[i] + K;
		else D[i] = 0;
		H.insert_line(2 * w[i], -(D[i] + 1ll * w[i] * w[i]));
	}
	printf("%lld\n", D[n]);
}